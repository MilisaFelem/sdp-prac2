/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sdp.prac2;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    void task2Test() {
        // Arrange
        List<String> input = Arrays.asList("apple", "banana", "cherry");
        List<String> expected = Arrays.asList("pple", "anana", "herry");
        // Act
        List<String> result = SimpleFunctions.Task2(input);
        // Assert
        assertEquals(expected, result);
    }
    @Test
    void task2Test() {
        // Arrange
        List<String> input = Arrays.asList("a", "", "cat", "d");
        List<String> expected = Arrays.asList("", "at");
        // Act
        List<String> result = SimpleFunctions.Task2(input);
        // Assert
        assertEquals(expected, result);
    }
    @Test
    public void testTask3(){
        //arrange
        String testBasic = "()";
        String testWrong = "(";
        String testNested = "((()))";

        //act and assert as it returns boolean
        assertTrue(Task3(testBasic));
        assertFalse(Task3(testWrong));
        assertTrue(Task3(testNested));
    }

    @Test
    public void task4Test() {
         // Arrange

         //normal case
         List<Integer> a = Arrays.asList(1, 2, 3);
         List<Integer> b = Arrays.asList(4, 5, 6);
         //Diff sizes case
         List<Integer> c = Arrays.asList(1, 2);
         List<Integer> d = Arrays.asList(3, 4, 5);
         //empty list case
         List<Integer> e = new ArrayList<>();
         List<Integer> f = new ArrayList<>();
         //one element case
         List<Integer> g = Arrays.asList(7);
         List<Integer> h = Arrays.asList(8);
 
 
         // Act
         List<Integer> result = SimpleFunctions.Task4(a, b);
         List<Integer> result2 = SimpleFunctions.Task4(c, d);
         List<Integer> result3 = SimpleFunctions.Task4(e, f);
         List<Integer> result4 = SimpleFunctions.Task4(g, h);
 
         // Assert
         List<Integer> expected = Arrays.asList(1*6, 2*5, 3*4); // [6, 10, 12]
         assertEquals(expected, result);
         assertNull(result2);
         assertEquals(new ArrayList<Integer>(), result3);
         assertEquals(Arrays.asList(56), result4);

    }

    @Test
    public void Task5Test1() {
        // Arrange
        List<Integer> input = Arrays.asList(1, 2, 3, 4, 5);
        
        // Act
        boolean result = SimpleFunctions.Task5(input);
        
        // Assert
        assertTrue(result, "Expected true for a sorted list");
    }
    @Test
    public void Task5Test2() {
        // Arrange
        List<Integer> input = Arrays.asList(1, 3, 2, 4, 5);
        
        // Act
        boolean result = SimpleFunctions.Task5(input);
        
        // Assert
        assertFalse(result, "Expected false for an unsorted list");
    }

}
